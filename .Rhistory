path<-"C:/Users/Rahul Kumar/Desktop/Singulariti"
setwd(path)
data<-read.csv("winequality-red.csv",sep=";",header=TRUE)
str(data)
data<-read.csv("winequality-red.csv",sep=";")
str(data)
data<-read.csv("winequality-red.csv",header=TRUE)
str(data)
data<-read.csv("winequality-red.csv",sep=";",header=TRUE)
path<-"C:/Users/Rahul Kumar/Desktop/Singulariti"
setwd(path)
data<-read.csv("winequality-red.csv",sep=";",header=TRUE)
str(data)
library(caret)
install.packages("caret")
library(caret)
intrain<-createDataPartition(y=data$classe,p=0.7,list=FALSE)
intrain<-createDataPartition(y=data,p=0.7,list=FALSE)
nrow(data)
n=nrow(data)
train = sample(1:n, size = round(0.7*n), replace=FALSE)
data.train = data[train,]
data.test = data[-train,]
str(data.train)
str(data.test)
data.test1<-subset(data.test,select=-c(quality))
str(data.test1)
summary(data.train)
table(is.na(data))
colSums(is.na(data))
library(ggplot2)
ggplot(data,aes(residual.sugar,quality))+geom_jitter()
ggplot(data,aes(quality,residual.suagr))+geom_jitter()
ggplot(data,aes(quality,residual.sugar))+geom_jitter()
ggplot(data,aes(quality,residual.sugar))
ggplot(data,aes(quality,residual.sugar))+geom_line()
with(data,plot(residual.sugar,quality))
with(data,plot(quality,residual.sugar))
qplot(quality,residual.sugar,data=data)
qplot(quality,residual.sugar,data=data,color=drv)
qplot(quality,residual.sugar,data=data)
qplot(quality,residual.sugar,data=data)
qplot(quality,density,data=data)
qplot(quality,alcohol,data=data)
ggplot(data,aes(quality,residual.sugar))
ggplot(data,aes(quality,residual.sugar))+geom_line()
ggplot(data,aes(quality,density))+geom_line()
ggplot(data = data, aes(x = alcohol, y = quality)) +
facet_wrap(~rating) +
geom_point()
ggplot(data = data, aes(x = alcohol, y = quality)) +
geom_point()
library(rpart)
library(rpart)
set.seed(333)
train.tree<-rpart(quality~.,data=data.train,method="class")
summary(train.tree)
predtiction_test<-predict(train.tree,newdata=data.test,type="class")
library(caret)
confusionMatrix(prediction_test,data.test$quality)
confusionMatrix(predtiction_test,data.test$quality)
install.packages("e1071")
library(e1071)
confusionMatrix(predtiction_test,data.test$quality)
confusionMatrix(predtiction_test,data.train$quality)
confusionMatrix(predtiction_test,data.test$quality)
fitControl <- trainControl(method = "repeatedcv", number = 4, repeats = 4)
set.seed(33)
gbmFit1 <- train(quality ~ ., data = data.train, method = "gbm", trControl = fitControl,verbose = FALSE)
gbmFit1 <- train(quality ~ ., data = data.train, method = "gbm", trControl = fitControl,verbose = FALSE)
gbm_ITV2 <- predict(gbmFit1, data.test,type= "prob")
auc(data.test$quality,gbm_ITV2)
library(Metrics)
install.packages("Metrics")
library(Metrics)
auc(data.test$quality,gbm_ITV2)
gbm_ITV2 <- predict(gbmFit1, data.test,type= "prob")[,2]
gbm_ITV2 <- predict(gbmFit1, data.test,type= "prob")
auc(data.test$quality,gbm_ITV2)
confusionMatrix(predtiction_test,data.test$quality)
path<-"C:/Users/Rahul Kumar/Desktop/Singulariti"
setwd(path)
data<-read.csv("winequality-red.csv",sep=";",header=TRUE)
ggplot(data=data, aes(quality,alcohol))+
geom_jitter+
geom_smooth(method='lm')+
xlab("Wine Quality") +
ylab("Alcohol")
path<-"C:/Users/Rahul Kumar/Desktop/Singulariti"
setwd(path)
data<-read.csv("winequality-red.csv",sep=";",header=TRUE)
ggplot(data=data, aes(quality,alcohol))+
geom_jitter()+
geom_smooth(method='lm')+
xlab("Wine Quality") +
ylab("Alcohol")
path<-"C:/Users/Rahul Kumar/Desktop/Singulariti"
setwd(path)
data<-read.csv("winequality-red.csv",sep=";",header=TRUE)
ggplot(data=data, aes(quality,alcohol))+
geom_jitter()+
geom_smooth(method='lm')
ggplot(data=data, aes(quality,residual.sugar))+
geom_jitter()+
geom_smooth(method='lm')
ggplot(data=data, aes(quality,density))+
geom_jitter()+
geom_smooth(method='lm')
train.tree<-glm(quality~.,data=data.train)
predtiction_test<-predict(train.tree,newdata=data.test)
confusionMatrix(predtiction_test,data.test$quality)
ggplot(data=data, aes(quality,alcohol))+
geom_box()+
geom_smooth(method='lm')
ggplot(data=data, aes(quality,alcohol))+
geom_boxplot()
ggplot(data=data, aes(alcohol,quality))+
geom_boxplot()
qplot(x = quality, y = alcohol,data = data,geom = "boxplot")
ggplot(data=data, aes(quality,alcohol))+
geom_boxplot()
ggplot(data=data, aes(as.factor(quality),alcohol))+
geom_boxplot()
ggplot(data=data, aes(as.factor(quality),alcohol))+geom_boxplot()+xlab("Quality") +ylab("Alcohol")
ggplot(data=data, aes(as.factor(quality),density))+geom_boxplot()+xlab("Quality") +ylab("Density")
ggplot(data=data, aes(as.factor(quality),residual.sugar))+geom_boxplot()+xlab("Quality") +ylab("Residual Sugar")
ggplot(data=data, aes(as.factor(quality),alcohol))+geom_boxplot()+xlab("Quality") +ylab("Alcohol")
ggplot(data=data, aes(as.factor(quality),density))+geom_boxplot()+xlab("Quality") +ylab("Density")
ggplot(data=data, aes(as.factor(quality),residual.sugar))+geom_boxplot()+xlab("Quality") +ylab("Residual Sugar")
qplot(quality, data = data, binwidth = 1, color = color, geom = "density") +
scale_x_continuous(breaks = seq(3, 9, 1))
qplot(quality, data = data, color = color, geom = "density") +
scale_x_continuous(breaks = seq(3, 9, 1))
qplot(quality, data = data, geom = "density") +
scale_x_continuous(breaks = seq(3, 9, 1))
ggplot(data=data, aes(quality,alcohol))+geom_jitter()+geom_smooth(method='lm')
ggplot(data=data, aes(quality,density))+geom_jitter()+geom_smooth(method='lm')
ggplot(data=data, aes(quality,residual.sugar))+geom_jitter()+geom_smooth(method='lm')
path<-"C:/Users/Rahul Kumar/Desktop/Singulariti"
setwd(path)
data<-read.csv("winequality-red.csv",sep=";",header=TRUE)
str(data)
summary(data)
table(is.na(data))
colSums(is.na(train))
colSums(is.na(data))
n=nrow(data)
data1= sample(1:n, size = round(0.7*n), replace=FALSE)
train = data[data1,]
test = data[-data1,]
library(rpart)
set.seed(333)
buildmodel<-rpart(quality~.,data=train,method="class")
summary(buildmodel)
library(rpart.plot)
rpart.plot(buildmodel)
install.packages("rpart.plot")
library(rpart)
set.seed(333)
buildmodel<-rpart(quality~.,data=train,method="class")
summary(buildmodel)
library(rpart.plot)
rpart.plot(buildmodel)
library(rpart)
set.seed(333)
buildmodel<-rpart(quality~.,data=train,method="class")
library(rpart.plot)
rpart.plot(buildmodel)
prediction<-predict(buildmodel,newdata=test,type="class")
confusionMatrix(prediction,test$quality)
prediction<-predict(buildmodel,newdata=test,type="class")
library(caret)
library(e1071)
confusionMatrix(prediction,test$quality)
test1=subset(test,select=-c(quality))
prediction<-predict(buildmodel,newdata=test1,type="class")
confusionMatrix(prediction,test$quality)
buildmodel<-rpart(quality~.,data=train,method="class")
buildmodel<-rpart(quality~.,data=train,method="class")
library(caret)
n=nrow(data)
data1= sample(1:n, size = round(0.7*n), replace=FALSE)
train = data[data1,]
test = data[-data1,]
test1=subset(test,select=-c(quality))
library(rpart)
set.seed(333)
buildmodel<-rpart(quality~.,data=train,method="class")
library(rpart.plot)
rpart.plot(buildmodel)
prediction<-predict(buildmodel,newdata=test1,type="class")
library(caret)
library(e1071)
confusionMatrix(prediction,test$quality)
library(caret)
n=nrow(data)
data1= sample(1:n, size = round(0.7*n), replace=FALSE)
train = data[data1,]
test = data[-data1,]
library(caret)
library(e1071)
confusionMatrix(prediction,test$quality)
library(caret)
library(e1071)
confusionMatrix(prediction,test$quality)
path<-"C:\Users\Rahul Kumar\Desktop\SalesPrediction"
path<-"C:\Users\Rahul Kumar\Desktop\SalesPrediction\"
path<-"C:/Users/Rahul Kumar/Desktop/SalesPrediction"
setwd(path)
train<-read.csv("Train.csv",na.strings=c(" ","","NA"))
test<-read.csv("Test.csv",na.strings=c(" ","","NA"))
colSums(is.na(train))
colSums(is.na(test))
imputed_train<-impute(train,classes=list(factor=imputeMode()))
library("mlr")
imputed_train<-impute(train,classes=list(factor=imputeMode()))
train<-imputed_train$data
imputed_test<-impute(test,classes=list(factor=imputeMode()))
test<-imputed_test$data
colSums(is.na(train))
colSums(is.na(test))
library(zoo)
df<-train$Item_Weight
train$Item_Weight<-na.approx(df)
colSums(is.na(train))
df1<-test$Item_Weight
test$Item_Weight<-na.approx(df1)
colSums(is.na(test))
df<-train$Item_Weight
train$Item_Weight<-na.approx(df)
colSums(is.na(train))
df1<-test$Item_Weight
test$Item_Weight<-na.approx(df1)
colSums(is.na(test))
summary("train")
summary(train)
table(train)
table(train$outlet_Type)
as.matrix(prop.table(table(train$outlet_Type)))
as.matrix(prop.table(table(train$Outlet_Type)))
as.matrix(prop.table(table(train$Outlet_Location_Type)))
as.matrix(prop.table(table(train$Item_Fat_Content)))
as.matrix(prop.table(table(train$Item_Type)))
as.matrix(prop.table(table(train$Outlet_Size)))
if(train$Item_Visibility==0)
{
df<-train$Item_Visibility
train$Item_Visibility<-na.approx(df)
}
if(train$Item_Visibility==0)
{
df<-train$Item_Visibility
train$Item_Visibility<-na.approx(df)
}
train<-read.csv("Train.csv",na.strings=c(" ","","NA"))
test<-read.csv("Test.csv",na.strings=c(" ","","NA"))
colSums(is.na(train))
colSums(is.na(test))
summary(train)
as.matrix(prop.table(table(train$Outlet_Type)))
as.matrix(prop.table(table(train$Outlet_Location_Type)))
as.matrix(prop.table(table(train$Item_Fat_Content)))
as.matrix(prop.table(table(train$Item_Type)))
as.matrix(prop.table(table(train$Outlet_Size)))
library("mlr")
imputed_train<-impute(train,classes=list(factor=imputeMode()))
train<-imputed_train$data
imputed_test<-impute(test,classes=list(factor=imputeMode()))
test<-imputed_test$data
library(zoo)
df<-train$Item_Weight
train$Item_Weight<-na.approx(df)
colSums(is.na(train))
df1<-test$Item_Weight
test$Item_Weight<-na.approx(df1)
colSums(is.na(test))
train$Outlet_Year=2017-train$Outlet_Establishment_Year
train$Outlet_Year
test$Outlet_Year=2017-test$Outlet_Establishment_Year
path<-"C:/Users/Rahul Kumar/Desktop/SalesPrediction"
setwd(path)
train<-read.csv("Train.csv",na.strings=c(" ","","NA"))
test<-read.csv("Test.csv",na.strings=c(" ","","NA"))
colSums(is.na(train))
colSums(is.na(test))
summary(train)
as.matrix(prop.table(table(train$Outlet_Type)))
as.matrix(prop.table(table(train$Outlet_Location_Type)))
as.matrix(prop.table(table(train$Item_Fat_Content)))
as.matrix(prop.table(table(train$Item_Type)))
as.matrix(prop.table(table(train$Outlet_Size)))
library("mlr")
imputed_train<-impute(train,classes=list(factor=imputeMode()))
train<-imputed_train$data
imputed_test<-impute(test,classes=list(factor=imputeMode()))
test<-imputed_test$data
library(zoo)
df<-train$Item_Weight
train$Item_Weight<-na.approx(df)
colSums(is.na(train))
df1<-test$Item_Weight
test$Item_Weight<-na.approx(df1)
colSums(is.na(test))
train$Outlet_Year=2017-train$Outlet_Establishment_Year
test$Outlet_Year=2017-test$Outlet_Establishment_Year
path<-"C:/Users/Rahul Kumar/Desktop/SalesPrediction"
setwd(path)
train<-read.csv("Train.csv",na.strings=c(" ","","NA"))
test<-read.csv("Test.csv",na.strings=c(" ","","NA"))
colSums(is.na(train))
colSums(is.na(test))
summary(train)
as.matrix(prop.table(table(train$Outlet_Type)))
as.matrix(prop.table(table(train$Outlet_Location_Type)))
as.matrix(prop.table(table(train$Item_Fat_Content)))
as.matrix(prop.table(table(train$Item_Type)))
as.matrix(prop.table(table(train$Outlet_Size)))
library("mlr")
imputed_train<-impute(train,classes=list(factor=imputeMode()))
train<-imputed_train$data
imputed_test<-impute(test,classes=list(factor=imputeMode()))
test<-imputed_test$data
library(zoo)
df<-train$Item_Weight
train$Item_Weight<-na.approx(df)
colSums(is.na(train))
df1<-test$Item_Weight
test$Item_Weight<-na.approx(df1)
colSums(is.na(test))
train$Outlet_Year=2017-train$Outlet_Establishment_Year
test$Outlet_Year=2017-test$Outlet_Establishment_Year
fit=lm(Item_Outlet_Sales~ ., data=train)
prediction=predict(fit,data=test)
submit <- data.frame(Item_Identifier=test$Item_Identifier,Outlet_Identifier=test$Outlet_Indentifier
,Item_Outlet_Sales = Prediction)
prediction=predict(fit,data=test)
submit <- data.frame(Item_Identifier=test$Item_Identifier,Outlet_Identifier=test$Outlet_Indentifier
,Item_Outlet_Sales = Prediction)
submit <- data.frame(Item_Identifier=test$Item_Identifier,Outlet_Identifier=test$Outlet_Indentifier
,Item_Outlet_Sales = prediction)
prediction=predict(fit,test)
prediction <- predict(predictionModel, newdata = test)
prediction <- predict(fit, newdata = test)
path<-"C:/Users/Rahul Kumar/Desktop/SalesPrediction"
setwd(path)
train<-read.csv("Train.csv",na.strings=c(" ","","NA"))
test<-read.csv("Test.csv",na.strings=c(" ","","NA"))
colSums(is.na(train))
colSums(is.na(test))
summary(train)
as.matrix(prop.table(table(train$Outlet_Type)))
as.matrix(prop.table(table(train$Outlet_Location_Type)))
as.matrix(prop.table(table(train$Item_Fat_Content)))
as.matrix(prop.table(table(train$Item_Type)))
as.matrix(prop.table(table(train$Outlet_Size)))
library("mlr")
imputed_train<-impute(train,classes=list(factor=imputeMode()))
train<-imputed_train$data
imputed_test<-impute(test,classes=list(factor=imputeMode()))
test<-imputed_test$data
library(zoo)
df<-train$Item_Weight
train$Item_Weight<-na.approx(df)
colSums(is.na(train))
df1<-test$Item_Weight
test$Item_Weight<-na.approx(df1)
colSums(is.na(test))
fit=lm(Item_Outlet_Sales~ ., data=train)
prediction <- predict(fit, newdata = test)
library(rpart)
fit <- rpart(Item_Outlet_Sales ~ .,data=train,method="anova",control=rpart.control(minsplit=2, cp=0))
Prediction <- predict(fit, test, type = "anova")
submit=data.frame(Item_Identifier=test$Item_Identifier,Outlet_Identifier=test$Outlet_Indentifier
,Item_Outlet_Sales = Prediction)
Prediction <- predict(fit,test,type="anova")
path<-"C:/Users/Rahul Kumar/Desktop/SalesPrediction"
setwd(path)
train<-read.csv("Train.csv",na.strings=c(" ","","NA"))
test<-read.csv("Test.csv",na.strings=c(" ","","NA"))
colSums(is.na(train))
colSums(is.na(test))
summary(train)
as.matrix(prop.table(table(train$Outlet_Type)))
as.matrix(prop.table(table(train$Outlet_Location_Type)))
as.matrix(prop.table(table(train$Item_Fat_Content)))
as.matrix(prop.table(table(train$Item_Type)))
as.matrix(prop.table(table(train$Outlet_Size)))
library("mlr")
imputed_train<-impute(train,classes=list(factor=imputeMode()))
train<-imputed_train$data
imputed_test<-impute(test,classes=list(factor=imputeMode()))
test<-imputed_test$data
library(zoo)
df<-train$Item_Weight
train$Item_Weight<-na.approx(df)
colSums(is.na(train))
df1<-test$Item_Weight
test$Item_Weight<-na.approx(df1)
colSums(is.na(test))
library(rpart)
fit <- rpart(Item_Outlet_Sales ~ .,data=train,method="anova",control=rpart.control(minsplit=2, cp=0))
Prediction <- predict(fit,test,type="anova")
Prediction <- predict(fit,test,type="prob")
Prediction <- predict(fit,test)
submit=data.frame(Item_Identifier=test$Item_Identifier,Outlet_Identifier=test$Outlet_Indentifier
,Item_Outlet_Sales = Prediction)
submit=data.frame(Item_Identifier=test$Item_Identifier,Outlet_Identifier=test$Outlet_Indentifier,Item_Outlet_Sales = Prediction)
fit=lm(Item_Outlet_Sales~ ., data=train)
prediction <- predict(fit, newdata = test)
prediction <- predict.lm(fit, newdata = test)
prediction <- predict(fit, newdata = test)
